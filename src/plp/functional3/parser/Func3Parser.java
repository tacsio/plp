/* Generated By:JavaCC: Do not edit this line. Func3Parser.java */
package plp.functional3.parser;
import java.util.ArrayList;
import java.util.List;
//Imports da Funcional3
import plp.functional3.*;
import plp.functional3.expression.*;
//Imports da Funcional2
import plp.functional2.declaration.DecFuncao;
import plp.functional2.expression.ValorFuncao;
import plp.functional2.expression.ExpDeclaracao;
import plp.functional2.expression.Aplicacao;
//Imports da Funcional1
import plp.functional1.declaration.DeclaracaoFuncional;
import plp.functional1.declaration.DecVariavel;
import plp.functional1.expression.IfThenElse;
//Imports da Expressão2
import plp.expressions2.expression.Expressao;
import plp.expressions2.expression.Valor;
import plp.expressions2.expression.ValorInteiro;
import plp.expressions2.expression.ValorString;
import plp.expressions2.expression.ValorBooleano;
import plp.expressions2.expression.Id;
import plp.expressions2.expression.ExpMenos;
import plp.expressions2.expression.ExpNot;
import plp.expressions2.expression.ExpLength;
import plp.expressions2.expression.ExpSoma;
import plp.expressions2.expression.ExpSub;
import plp.expressions2.expression.ExpAnd;
import plp.expressions2.expression.ExpOr;
import plp.expressions2.expression.ExpEquals;
import plp.expressions2.expression.ExpConcat;

public class Func3Parser implements Func3ParserConstants {
  public static void main(String args [])
  {
    Func3Parser parser;
    if (args.length == 0)
    {
      System.out.println("Funcional 3 PLP Parser Version 0.0.1:  Reading from standard input . . .");
      parser = new Func3Parser(System.in);
    }
    else if (args.length == 1)
    {
      System.out.println("Funcional 3 PLP Parser Version 0.0.1:  Reading from file " + args [0] + " . . .");
      try
      {
        parser = new Func3Parser(new java.io.FileInputStream(args [0]));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Funcional 3 PLP Parser Version 0.0.1:  File " + args [0] + " not found.");
        return;
      }
    }
    else
    {
      System.out.println("Funcional 3 PLP Parser Version 0.0.1:  Usage is one of:");
      System.out.println("         java Func3Parser < inputfile");
      System.out.println("OR");
      System.out.println("         java Func3Parser inputfile");
      return;
    }
    Programa programa = null;
    try
    {
      programa = parser.Input();
      System.out.println("Funcional 3 PLP Parser Version 0.0.1: Funcional3 program parsed successfully.");
    }
    catch (Exception e)
    {
      e.printStackTrace();
      System.out.println("Funcional 3 PLP Parser Version 0.0.1: Encountered errors during parse.");
      System.exit(0);
    }
    try
    {
      System.out.println("Funcional 3 PLP Parser Version 0.0.1: running...");
      Valor val = (Valor) programa.executar();
      if (val instanceof ValorString)
      {
        ValorString valStr = (ValorString) val;
        System.out.println("Funcional 3 PLP Parser Version 0.0.1: resultado=" + valStr.valor());
      }
      else if (val instanceof ValorInteiro)
      {
        ValorInteiro valInt = (ValorInteiro) val;
        System.out.println("Funcional 3 PLP Parser Version 0.0.1: resultado=" + valInt.valor());
      }
      else if (val instanceof ValorBooleano)
      {
        ValorBooleano valBool = (ValorBooleano) val;
        System.out.println("Funcional 3 PLP Parser Version 0.0.1: resultado=" + valBool.valor());
      }
      else if (val instanceof ValorFuncao)
      {
        ValorFuncao valFunc = (ValorFuncao) val;
        System.out.println("Funcional 3 PLP Parser Version 0.0.1: resultado = " + val);
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
      System.out.println("Funcional 3 PLP Parser Version 0.0.1:  Encountered errors during execution.");
    }
  }

  static final public Programa Input() throws ParseException {
    trace_call("Input");
    try {
  Programa retorno;
      retorno = PPrograma();
      jj_consume_token(0);
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Input");
    }
  }

  static final public ValorInteiro PValorInteiro() throws ParseException {
    trace_call("PValorInteiro");
    try {
  Token token;
      token = jj_consume_token(INTEGER_LITERAL);
    {if (true) return new ValorInteiro(Integer.parseInt(token.toString()));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorInteiro");
    }
  }

  static final public ValorBooleano PValorBooleano() throws ParseException {
    trace_call("PValorBooleano");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
        jj_consume_token(FALSE);
    {if (true) return new ValorBooleano(false);}
        break;
      case TRUE:
        jj_consume_token(TRUE);
    {if (true) return new ValorBooleano(true);}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorBooleano");
    }
  }

  static final public ValorString PValorString() throws ParseException {
    trace_call("PValorString");
    try {
  Token token;
      token = jj_consume_token(STRING_LITERAL);
    String tokenStr = token.toString();
    tokenStr = tokenStr.substring(1, tokenStr.length() - 1);
    {if (true) return new ValorString(tokenStr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorString");
    }
  }

  static final public Valor PValorFuncao() throws ParseException {
    trace_call("PValorFuncao");
    try {
  List lista = null;
  Expressao expressao;
      jj_consume_token(FN);
      lista = PListaId();
      jj_consume_token(DOT);
      expressao = PExpressao();
    {if (true) return new ValorFuncao(lista, expressao);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorFuncao");
    }
  }

  static final public Valor PValorLista() throws ParseException {
    trace_call("PValorLista");
    try {
  Expressao v = null;
  ValorLista vlista = null;
      if (jj_2_1(2147483647)) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
    {if (true) return ValorLista.getInstancia(null, null);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
          v = PExpressao();
      vlista = ValorLista.getInstancia(v, null);
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_1;
            }
            jj_consume_token(COMMA);
            v = PExpressao();
        vlista.cons(v);
          }
          jj_consume_token(RBRACKET);
    {if (true) return vlista.inverter();}
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorLista");
    }
  }

  static final public Valor PValor() throws ParseException {
    trace_call("PValor");
    try {
  Valor retorno;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        retorno = PValorInteiro();
        break;
      case TRUE:
      case FALSE:
        retorno = PValorBooleano();
        break;
      case STRING_LITERAL:
        retorno = PValorString();
        break;
      case FN:
        retorno = PValorFuncao();
        break;
      case LBRACKET:
        retorno = PValorLista();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValor");
    }
  }

  static final public Id PId() throws ParseException {
    trace_call("PId");
    try {
  Token token;
      token = jj_consume_token(IDENTIFIER);
    String tokenStr = token.toString();
    {if (true) return new Id(tokenStr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PId");
    }
  }

  static final public Expressao PExpMenos() throws ParseException {
    trace_call("PExpMenos");
    try {
  Expressao retorno;
      jj_consume_token(MINUS);
      retorno = PExpPrimaria();
    {if (true) return new ExpMenos(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpMenos");
    }
  }

  static final public Expressao PExpNot() throws ParseException {
    trace_call("PExpNot");
    try {
  Expressao retorno;
      jj_consume_token(NOT);
      retorno = PExpPrimaria();
    {if (true) return new ExpNot(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpNot");
    }
  }

  static final public Expressao PExpLength() throws ParseException {
    trace_call("PExpLength");
    try {
  Expressao retorno;
      jj_consume_token(LENGTH);
      retorno = PExpPrimaria();
    if (retorno instanceof ValorString)
    {
      ValorString val = (ValorString) retorno;
    }
    {if (true) return new ExpLength(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpLength");
    }
  }

  static final public Expressao PExpPrimaria() throws ParseException {
    trace_call("PExpPrimaria");
    try {
  Expressao retorno;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case FN:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case LBRACKET:
        retorno = PValor();
        break;
      default:
        jj_la1[4] = jj_gen;
        if (jj_2_2(2147483647)) {
          retorno = PAplicacao();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            retorno = PId();
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            retorno = PExpressao();
            jj_consume_token(RPAREN);
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpPrimaria");
    }
  }

  static final public Expressao PAplicacao() throws ParseException {
    trace_call("PAplicacao");
    try {
  Id id;
  List lista;
      id = PId();
      jj_consume_token(LPAREN);
      lista = PListaExpr();
      jj_consume_token(RPAREN);
    {if (true) return new Aplicacao(id, lista);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PAplicacao");
    }
  }

  static final public List PListaId() throws ParseException {
    trace_call("PListaId");
    try {
  List retorno = null;
  Id id;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        id = PId();
      if (retorno == null)
      {
        retorno = new ArrayList();
        retorno.add(id);
      }
      else
      {
        retorno.add(id);
      }
      }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PListaId");
    }
  }

  static final public DeclaracaoFuncional PDeclVar() throws ParseException {
    trace_call("PDeclVar");
    try {
  Id id;
  Expressao expressao;
  DeclaracaoFuncional retorno;
      jj_consume_token(VAR);
      id = PId();
      jj_consume_token(ASSIGN);
      expressao = PExpressao();
    {if (true) return new DecVariavel(id, expressao);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDeclVar");
    }
  }

  static final public DeclaracaoFuncional PDeclFuncao() throws ParseException {
    trace_call("PDeclFuncao");
    try {
  Id id;
  Expressao expressao;
  DeclaracaoFuncional retorno;
  List lista;
      jj_consume_token(FUNC);
      id = PId();
      lista = PListaId();
      jj_consume_token(ASSIGN);
      expressao = PExpressao();
    {if (true) return new DecFuncao(id, new ValorFuncao(lista, expressao));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDeclFuncao");
    }
  }

  static final public List PDeclFuncional() throws ParseException {
    trace_call("PDeclFuncional");
    try {
  List retorno = null;
  DeclaracaoFuncional decl;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        decl = PDeclVar();
        break;
      case FUNC:
        decl = PDeclFuncao();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    retorno = new ArrayList();
    retorno.add(decl);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        if (jj_2_3(2147483647)) {
          jj_consume_token(COMMA);
          decl = PDeclVar();
        } else if (jj_2_4(2147483647)) {
          jj_consume_token(COMMA);
          decl = PDeclFuncao();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      retorno.add(decl);
      }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDeclFuncional");
    }
  }

  static final public Expressao PExpDeclaracao() throws ParseException {
    trace_call("PExpDeclaracao");
    try {
  List declaracoes;
  Expressao expressao;
      jj_consume_token(LET);
      declaracoes = PDeclFuncional();
      jj_consume_token(IN);
      expressao = PExpressao();
    {if (true) return new ExpDeclaracao(declaracoes, expressao);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpDeclaracao");
    }
  }

  static final public Expressao PExpCondicional() throws ParseException {
    trace_call("PExpCondicional");
    try {
  Expressao expCond, expThen, expElse;
      jj_consume_token(IF);
      expCond = PExpressao();
      jj_consume_token(THEN);
      expThen = PExpressao();
      jj_consume_token(ELSE);
      expElse = PExpressao();
    {if (true) return new IfThenElse(expCond, expThen, expElse);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpCondicional");
    }
  }

  static final public List PListaExpr() throws ParseException {
    trace_call("PListaExpr");
    try {
  List retorno = null;
  Expressao expr;
      expr = PExpressao();
      retorno = new ArrayList();
      retorno.add(expr);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        expr = PExpressao();
        retorno.add(expr);
      }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PListaExpr");
    }
  }

  static final public Expressao PExpHead() throws ParseException {
    trace_call("PExpHead");
    try {
  Expressao tmpExp = null;
      jj_consume_token(HEAD);
      tmpExp = PExpressao();
    {if (true) return new ExpHead(tmpExp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpHead");
    }
  }

  static final public Expressao PExpTail() throws ParseException {
    trace_call("PExpTail");
    try {
  Expressao tmpExp = null;
      jj_consume_token(TAIL);
      tmpExp = PExpressao();
    {if (true) return new ExpTail(tmpExp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpTail");
    }
  }

  static final public Expressao PExpCompreensaoLista() throws ParseException {
    trace_call("PExpCompreensaoLista");
    try {
  ExpCompreensaoLista retorno = null;
  Expressao expressao = null;
  Expressao filtro = null;
  List geradores = new ArrayList();
  Gerador geradorTemp = null;
      jj_consume_token(LBRACKET);
      expressao = PExpressao();
      label_5:
      while (true) {
        geradorTemp = PGerador();
      geradores.add(geradorTemp);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        jj_consume_token(IF);
        filtro = PExpressao();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
    retorno = new ExpCompreensaoLista(expressao);
    retorno.setFiltro(filtro);
    retorno.setGeradores(geradores);
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpCompreensaoLista");
    }
  }

  static final public Gerador PGerador() throws ParseException {
    trace_call("PGerador");
    try {
  Id id = null;
  Expressao expressao = null;
      jj_consume_token(FOR);
      id = PId();
      jj_consume_token(IN);
      expressao = PExpressao();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    {if (true) return new Gerador(id, expressao);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PGerador");
    }
  }

  static final public Expressao PExpUnaria() throws ParseException {
    trace_call("PExpUnaria");
    try {
  Expressao retorno;
      if (jj_2_5(2147483647)) {
        retorno = PExpMenos();
      } else if (jj_2_6(2147483647)) {
        retorno = PExpNot();
      } else if (jj_2_7(2147483647)) {
        retorno = PExpLength();
      } else if (jj_2_8(2147483647)) {
        retorno = PExpHead();
      } else if (jj_2_9(2147483647)) {
        retorno = PExpTail();
      } else if (jj_2_10(2147483647)) {
        retorno = PExpDeclaracao();
      } else if (jj_2_11(2147483647)) {
        retorno = PExpCondicional();
      } else if (jj_2_12(2147483647)) {
        retorno = PExpCompreensaoLista();
      } else if (jj_2_13(2147483647)) {
        retorno = PExpPrimaria();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpUnaria");
    }
  }

  static final public Expressao PExpBinaria() throws ParseException {
    trace_call("PExpBinaria");
    try {
  Expressao retorno, param2;
  Id id;
  List list = null;
      retorno = PExpUnaria();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case LPAREN:
        case GT:
        case LT:
        case EQ:
        case CONCAT:
        case CONS:
        case CONCAT_LISTA:
        case SEQ:
        case PLUS:
        case MINUS:
        case STAR:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          param2 = PExpUnaria();
        retorno = new ExpSoma(retorno, param2);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          param2 = PExpUnaria();
        retorno = new ExpSub(retorno, param2);
          break;
        case AND:
          jj_consume_token(AND);
          param2 = PExpUnaria();
        retorno = new ExpAnd(retorno, param2);
          break;
        case OR:
          jj_consume_token(OR);
          param2 = PExpUnaria();
        retorno = new ExpOr(retorno, param2);
          break;
        case EQ:
          jj_consume_token(EQ);
          param2 = PExpUnaria();
        retorno = new ExpEquals(retorno, param2);
          break;
        case CONCAT:
          jj_consume_token(CONCAT);
          param2 = PExpUnaria();
        retorno = new ExpConcat(retorno, param2);
          break;
        case CONS:
          jj_consume_token(CONS);
          param2 = PExpressao();
        retorno = new ExpCons(retorno, param2);
          break;
        case CONCAT_LISTA:
          jj_consume_token(CONCAT_LISTA);
          param2 = PExpressao();
        retorno = new ExpConcatLista(retorno, param2);
          break;
        case SEQ:
          jj_consume_token(SEQ);
          param2 = PExpressao();
        retorno = new ExpSequencia(retorno, param2);
          break;
        case GT:
          jj_consume_token(GT);
          param2 = PExpressao();
        retorno = new ExpMaiorQue(retorno, param2);
          break;
        case LT:
          jj_consume_token(LT);
          param2 = PExpressao();
        retorno = new ExpMenorQue(retorno, param2);
          break;
        case STAR:
          jj_consume_token(STAR);
          param2 = PExpressao();
        retorno = new ExpMult(retorno, param2);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOT:
          case LENGTH:
          case TRUE:
          case FALSE:
          case LET:
          case IF:
          case FN:
          case HEAD:
          case TAIL:
          case INTEGER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACKET:
          case MINUS:
            list = PListaExpr();
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
        retorno = new Aplicacao((Expressao) retorno, list);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpBinaria");
    }
  }

  static final public Expressao PExpressao() throws ParseException {
    trace_call("PExpressao");
    try {
  Expressao retorno;
      retorno = PExpBinaria();
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpressao");
    }
  }

  static final public Programa PPrograma() throws ParseException {
    trace_call("PPrograma");
    try {
  Expressao retorno;
      retorno = PExpressao();
    {if (true) return new Programa(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PPrograma");
    }
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static final private boolean jj_3R_37() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_57() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static final private boolean jj_3R_36() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_56() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static final private boolean jj_3R_77() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static final private boolean jj_3R_27() {
    if (jj_3R_35()) return true;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_scan_token(FN)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_53() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_35() {
    if (jj_scan_token(FUNC)) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_69() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_3R_13()) return true;
    return false;
  }

  static final private boolean jj_3R_52() {
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_11()) return true;
    return false;
  }

  static final private boolean jj_3R_34() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_50() {
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3R_75() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_3R_10()) return true;
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_3R_13()) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_9()) return true;
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_8()) return true;
    return false;
  }

  static final private boolean jj_3R_47() {
    if (jj_3R_11()) return true;
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_46() {
    if (jj_3R_10()) return true;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_3R_9()) return true;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_3R_8()) return true;
    return false;
  }

  static final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_74() {
    if (jj_3R_7()) return true;
    return false;
  }

  static final private boolean jj_3R_66() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_29() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_31() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_3R_7()) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    if (jj_3R_31()) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_3R_30()) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    if (jj_3R_29()) return true;
    return false;
  }

  static final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    if (jj_3R_19()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_10() {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_12() {
    if (jj_scan_token(TAIL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_9() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_11() {
    if (jj_scan_token(HEAD)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_73() {
    if (jj_3R_43()) return true;
    return false;
  }

  static final private boolean jj_3R_8() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_17() {
    if (jj_3R_25()) return true;
    return false;
  }

  static final private boolean jj_3R_72() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_65() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_42() {
    if (jj_3R_71()) return true;
    return false;
  }

  static final private boolean jj_3R_63() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_41() {
    if (jj_3R_70()) return true;
    return false;
  }

  static final private boolean jj_3R_40() {
    if (jj_3R_69()) return true;
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_3R_68()) return true;
    return false;
  }

  static final private boolean jj_3R_38() {
    if (jj_3R_67()) return true;
    return false;
  }

  static final private boolean jj_3R_14() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_62() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_61() {
    if (jj_scan_token(SEQ)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_13() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_60() {
    if (jj_scan_token(CONCAT_LISTA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(FUNC)) return true;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_59() {
    if (jj_scan_token(CONS)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static final private boolean jj_3R_58() {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public Func3ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x6000,0x0,0x0,0x44406000,0x44406000,0x80000000,0x80000000,0x210000,0x0,0x0,0x2000000,0x40000,0x0,0x600,0xc5c4f800,0x600,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x200,0x40,0x40,0x40,0x4,0x0,0x0,0x200,0x200,0x0,0x0,0x200,0x3f823004,0x10000044,0x3f823004,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[13];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public Func3Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Func3Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Func3ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Func3Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new Func3ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Func3Parser(Func3ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(Func3ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[67];
    for (int i = 0; i < 67; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

  static final public void enable_tracing() {
    trace_enabled = true;
  }

  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static final private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static final private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static final private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static final private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 13; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
